'use client';

import { useState } from 'react';
import { Package, Loader2 } from 'lucide-react';

export default function SeedDataButton() {
  const [isLoading, setIsLoading] = useState(false);

  const handleSeed = async () => {
    setIsLoading(true);
    
    try {
      const response = await fetch('/api/seed', {
        method: 'POST',
      });
      
      const result = await response.json();
      
      if (response.ok) {
        if (result.message && result.message.includes('—É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')) {
          alert('–î–µ–º–æ-—Ç–æ–≤–∞—Ä—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ! ‚úÖ');
        } else {
          alert(`–î–µ–º–æ-—Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! üéâ\n–°–æ–∑–¥–∞–Ω–æ: ${result.products} —Ç–æ–≤–∞—Ä–æ–≤`);
          window.location.reload();
        }
      } else {
        alert(`–û—à–∏–±–∫–∞: ${result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã'}`);
      }
    } catch {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–º–æ-—Ç–æ–≤–∞—Ä–æ–≤');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <button
      onClick={handleSeed}
      disabled={isLoading}
      className="flex items-center gap-3 p-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all w-full disabled:opacity-50"
    >
      {isLoading ? (
        <Loader2 size={18} className="animate-spin" />
      ) : (
        <Package size={18} />
      )}
      {isLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã'}
    </button>
  );
}
